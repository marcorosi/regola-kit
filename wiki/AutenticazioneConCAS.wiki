#summary Come configurare l'autenticazione tramite CAS

Regola-kit permette di integrare un'applicazione con un sistema di single sign on implementato con CAS (www.ja-sig.org/products/cas/).
L'applicazione potrà così sfruttare l'autenticazione di un server CAS esistente e sfruttare anche il servizio di proxy authentication.

Le istruzione sono le seguenti:

* aggiungere la dipendenza a regola-cas-client in pom.xml:
{{{
	 <dependency>
	    <groupId>org.regola</groupId>
	    <artifactId>regola-cas-client</artifactId>
	    <version>1.0.0</version>
	 </dependency>
}}}

* aggiungere la servlet di callback in web.xml:
{{{
	<!-- servlet x il callback url -->
	<servlet>
	  <servlet-name>casproxy</servlet-name>
	  <servlet-class>org.regola.security.cas.ProxyTicketReceptor</servlet-class>
	</servlet>

	...

	<servlet-mapping>
	  <servlet-name>casproxy</servlet-name>
	  <url-pattern>/casProxy/*</url-pattern>
	</servlet-mapping>
}}}

* aggiungere il file cas.propeties in WEB-INF:
{{{
#url del server cas
cas.securityContext.proxyReceptor.proxyUrl=https://localhost:8443/cas/proxy
cas.securityContext.casProcessingFilterEntryPoint.loginUrl=https://localhost:8443/cas/login
cas.securityContext.casProxyTicketValidator.casValidate=https://localhost:8443/cas/proxyValidate
#url relativi a questa applicazione
cas.service.standard=https://localhost:8443/regola-application/j_acegi_cas_security_check
cas.service.proxied=http://localhost:8080/regola-application/service/
cas.service.proxyCallbackUrl=https://localhost:8443/regola-application/casProxy
}}}

* configurare il file security.xml:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<!-- ===== configurazioni x cas ===== --> 
	<bean id="casPropertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	  <property name="ignoreResourceNotFound" value="true" />
	  <property name="placeholderPrefix" value="#{" />
      <property name="locations">
            <list>
            	<value>/WEB-INF/cas.properties</value>
            	<!-- 
            		questo file è facoltativo e serve
            		per sovrascrivere le property dello sviluppo
            		negli ambienti di test e produzione
            	 -->
                <value>file:/etc/joss/server.properties</value>
             </list>
      </property>		
	</bean>

	<bean id="servletContextAttributeExporter" 
		class="org.springframework.web.context.support.ServletContextAttributeExporter">
		<property name="attributes">
			<map>
				<!-- per configurare la servlet di callback  -->
				<entry key="edu.yale.its.tp.cas.proxyUrl" value="#{cas.securityContext.proxyReceptor.proxyUrl}" />
			</map>
		</property>
	</bean>
	 
	<bean id="serviceProperties" class="org.acegisecurity.ui.cas.ServiceProperties">
	  <property name="service" value="#{cas.service.proxied}" />
	  <property name="sendRenew"><value>false</value></property>
	</bean>

	<bean id="servicePropertiesPage" class="org.acegisecurity.ui.cas.ServiceProperties">
	  <property name="service" value="#{cas.service.standard}" />
	  <property name="sendRenew"><value>false</value></property>
	</bean>

	<bean id="casProcessingFilter" class="org.regola.security.cas.CasProxyFilter" init-method="initFilterProcessesUrl">
	  <property name="authenticationManager"><ref bean="authenticationManager"/></property>
	  <property name="authenticationFailureUrl"><value>/casfailed.jsp</value></property>
	  <property name="defaultTargetUrl"><value>/</value></property>
	  <property name="filterProcessesUrl"><value>/.*/service/.*</value></property>
	</bean>

	<bean id="casProcessingFilterForPages" class="org.acegisecurity.ui.cas.CasProcessingFilter">
	  <property name="authenticationManager"><ref bean="authenticationManagerPage"/></property>
	  <property name="authenticationFailureUrl"><value>/casfailed.jsp</value></property>
	  <property name="defaultTargetUrl"><value>/</value></property>
	  <property name="filterProcessesUrl"><value>/j_acegi_cas_security_check</value></property>
	</bean>
		
	<bean id="exceptionTranslationFilter" class="org.acegisecurity.ui.ExceptionTranslationFilter">
	  <property name="authenticationEntryPoint"><ref local="casProcessingFilterEntryPoint"/></property>
	</bean>

	<bean id="exceptionTranslationFilterPage" class="org.acegisecurity.ui.ExceptionTranslationFilter">
	  <property name="authenticationEntryPoint"><ref local="casProcessingFilterEntryPointPage"/></property>
	</bean>
	
	<bean id="casProcessingFilterEntryPoint" class="org.acegisecurity.ui.cas.CasProcessingFilterEntryPoint">
	  <property name="loginUrl" value="#{cas.securityContext.casProcessingFilterEntryPoint.loginUrl}" />
	  <property name="serviceProperties"><ref bean="serviceProperties"/></property>
	</bean>

	<bean id="casProcessingFilterEntryPointPage" class="org.acegisecurity.ui.cas.CasProcessingFilterEntryPoint">
	  <property name="loginUrl" value="#{cas.securityContext.casProcessingFilterEntryPoint.loginUrl}" />
	  <property name="serviceProperties"><ref bean="servicePropertiesPage"/></property>
	</bean>

	<bean id="authenticationManager" class="org.acegisecurity.providers.ProviderManager">
	  <property name="providers">
	    <list>
	      <ref bean="casAuthenticationProvider"/>
	    </list>
	  </property>
	</bean>
	
	<bean id="authenticationManagerPage" class="org.acegisecurity.providers.ProviderManager">
	  <property name="providers">
	    <list>
	      <ref bean="casAuthenticationProviderPage"/>
	    </list>
	  </property>
	</bean>
	
	<bean id="casAuthenticationProvider" class="org.acegisecurity.providers.cas.CasAuthenticationProvider">
	  <property name="casAuthoritiesPopulator"><ref bean="casAuthoritiesPopulator"/></property>
	  <property name="casProxyDecider"><ref bean="casProxyDecider"/></property>
	  <property name="ticketValidator"><ref bean="casProxyTicketValidator"/></property>
	  <property name="statelessTicketCache"><ref bean="statelessTicketCache"/></property>
	  <property name="key"><value>my_password_for_this_auth_provider_only</value></property>
	</bean>

	<bean id="casAuthenticationProviderPage" class="org.acegisecurity.providers.cas.CasAuthenticationProvider">
	  <property name="casAuthoritiesPopulator"><ref bean="casAuthoritiesPopulator"/></property>
	  <property name="casProxyDecider"><ref bean="casProxyDecider"/></property>
	  <property name="ticketValidator"><ref bean="casProxyTicketValidatorPage"/></property>
	  <property name="statelessTicketCache"><ref bean="statelessTicketCache"/></property>
	  <property name="key"><value>my_password_for_this_auth_provider_only</value></property>
	</bean>
	
	<bean id="casProxyTicketValidator" class="org.acegisecurity.providers.cas.ticketvalidator.CasProxyTicketValidator">
	  <property name="casValidate" value="#{cas.securityContext.casProxyTicketValidator.casValidate}" />
	  <property name="proxyCallbackUrl" value="#{cas.service.proxyCallbackUrl}" />
	  <property name="serviceProperties"><ref bean="serviceProperties"/></property>
	  <!-- <property name="trustStore"><value>/some/path/to/your/lib/security/cacerts</value></property> -->
	</bean>

	<bean id="casProxyTicketValidatorPage" class="org.acegisecurity.providers.cas.ticketvalidator.CasProxyTicketValidator">
	  <property name="casValidate" value="#{cas.securityContext.casProxyTicketValidator.casValidate}" />
	  <property name="proxyCallbackUrl" value="#{cas.service.proxyCallbackUrl}" />
	  <property name="serviceProperties"><ref bean="servicePropertiesPage"/></property>
	  <!-- <property name="trustStore"><value>/some/path/to/your/lib/security/cacerts</value></property> -->
	</bean>
	
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	  <property name="configLocation">
	    <value>classpath:/ehcache-failsafe.xml</value>
	  </property>
	</bean>
	
	<bean id="ticketCacheBackend" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
	  <property name="cacheManager">
	    <ref local="cacheManager"/>
	  </property>
	  <property name="cacheName">
	    <value>ticketCache</value>
	  </property>
	</bean>
	
	<bean id="statelessTicketCache" class="org.acegisecurity.providers.cas.cache.EhCacheBasedTicketCache">
	  <property name="cache"><ref local="ticketCacheBackend"/></property>
	</bean>
	
	<bean id="casAuthoritiesPopulator" class="org.acegisecurity.providers.cas.populator.DaoCasAuthoritiesPopulator">
	  <property name="userDetailsService"><ref bean="inMemoryDaoImpl"/></property>
	</bean>
	
	<!-- ridefinire questo bean per ricavare le autorizzazioni dell'utente -->
	<bean id="inMemoryDaoImpl" class="org.acegisecurity.userdetails.memory.InMemoryDaoImpl">
  		<property name="userMap">
			<value>
				marco=admin,user
			</value>
		</property>
	</bean>
	
	<bean id="casProxyDecider" class="org.acegisecurity.providers.cas.proxy.AcceptAnyCasProxy"/>

	<!-- ======================== FILTER CHAIN ======================= -->
	<bean id="filterChainProxy"
		class="org.acegisecurity.util.FilterChainProxy">
		<property name="filterInvocationDefinitionSource">
			<value>
				CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT 
				/images/**=#NONE#
				/scripts/**=#NONE# 
				/styles/**=#NONE#
				/service/**=httpSessionContextIntegrationFilter,logoutFilter,casProcessingFilter,securityContextHolderAwareRequestFilter,anonymousProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
				/**=httpSessionContextIntegrationFilter,logoutFilter,casProcessingFilterForPages,securityContextHolderAwareRequestFilter,anonymousProcessingFilter,exceptionTranslationFilterPage,filterInvocationInterceptor
			</value>
			<!-- Put channelProcessingFilter before securityContextHolderAwareRequestFilter to turn on SSL switching -->
			<!-- It's off by default b/c Canoo WebTest doesn't support SSL out-of-the-box -->
		</property>
	</bean>

	<bean id="httpSessionContextIntegrationFilter"
		class="org.acegisecurity.context.HttpSessionContextIntegrationFilter" />

	<!-- NOTA: potrebbe causare errori 404 su WebSphere (http://issues.appfuse.org/browse/APF-566) -->
	<bean id="logoutFilter" class="org.acegisecurity.ui.logout.LogoutFilter">
		<!-- pagine a cui fare il redirect dopo il logout -->
		<constructor-arg value="/welcome.jsp"/> 
		<constructor-arg>
			<list>
				<bean class="org.acegisecurity.ui.logout.SecurityContextLogoutHandler"/>
			</list>
		</constructor-arg>
	</bean>

	<bean id="authenticationProcessingFilter"
		class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="authenticationFailureUrl"
			value="/login.html?error=true" />
		<property name="defaultTargetUrl" value="/" />
		<property name="filterProcessesUrl" value="/j_security_check" />
		<!--  property name="rememberMeServices" ref="rememberMeServices"/ -->
	</bean>

	<bean id="securityContextHolderAwareRequestFilter"
		class="org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter" />

	<bean id="anonymousProcessingFilter"
		class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
		<property name="key" value="anonymous" />
		<property name="userAttribute" value="anonymous,ROLE_ANONYMOUS" />
	</bean>

	<bean id="filterInvocationInterceptor"
		class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="accessDecisionManager"
			ref="accessDecisionManager" />
		<property name="objectDefinitionSource">
			<value>
				PATTERN_TYPE_APACHE_ANT
				/services/*=ROLE_ANONYMOUS,admin,user
				/login.*=ROLE_ANONYMOUS,admin,user
				/**/*.html*=admin,user
			</value>
		</property>
	</bean>

	<bean id="accessDecisionManager"
		class="org.acegisecurity.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="false" />
		<property name="decisionVoters">
			<list>
				<bean class="org.acegisecurity.vote.RoleVoter">
					<property name="rolePrefix" value="" />
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- This bean definition must be available to ApplicationContext.getBean() so StartupListener
		can look for it and detect if password encryption is turned on or not -->
	<bean id="passwordEncoder" class="org.acegisecurity.providers.encoding.ShaPasswordEncoder" />

	<!-- This bean is optional; it isn't used by any other bean as it only listens and logs -->
	<bean id="loggerListener" class="org.acegisecurity.event.authentication.LoggerListener" />
	
	<!-- SSL Switching: to use this, configure it in the filterChainProxy bean -->
	<bean id="channelProcessingFilter"
		class="org.acegisecurity.securechannel.ChannelProcessingFilter">
		<property name="channelDecisionManager"
			ref="channelDecisionManager" />
		<property name="filterInvocationDefinitionSource">
			<value>
				PATTERN_TYPE_APACHE_ANT
				/admin/**=REQUIRES_SECURE_CHANNEL
				/login*=REQUIRES_SECURE_CHANNEL
				/j_security_check*=REQUIRES_SECURE_CHANNEL
				/**=REQUIRES_INSECURE_CHANNEL
			</value>
		</property>
	</bean>

	<bean id="channelDecisionManager"
		class="org.acegisecurity.securechannel.ChannelDecisionManagerImpl">
		<property name="channelProcessors">
			<list>
				<bean
					class="org.acegisecurity.securechannel.SecureChannelProcessor" />
				<bean
					class="org.acegisecurity.securechannel.InsecureChannelProcessor" />
			</list>
		</property>
	</bean>
</beans>

}}}